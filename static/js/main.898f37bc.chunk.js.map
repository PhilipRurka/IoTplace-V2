{"version":3,"sources":["themes/colors.js","helpers/breakpoints.js","helpers/conditions.js","components/PasswordRequirements.jsx","components/BubbleCard.jsx","components/buttons/BasicButton.jsx","helpers/general.js","redux/constants.js","components/Form.jsx","components/buttons/IconButton.jsx","redux/actions.js","components/Display.jsx","components/App.jsx","serviceWorker.js","redux/reducers.js","redux/stores.js","redux/middleware.js","index.js"],"names":["colors","colorTheme","cloud","progression","progressionHover","warning","warningHover","error","errorHover","primaryBorder","primaryShadow","primaryBackground","secondaryBackground","thirdaryBackground","primaryCopy","secondaryCopy","nightVision","breaks","emailTest","email","test","nameLengthTest","name","length","passwordLengthTest","password","passwordUpperTest","passwordLowerTest","passwordSpecialTest","passwordNumberTest","match","lgBreak","largeBreakpoint","Wrapper","showingRequirements","heightCondition1","height","heightCondition2","position","overflow","transition","Container","top","left","width","border","borderRadius","Content","Label","Ul","Li","listStyleType","paddingLeft","lineHeight","content","backgroundColor","success","Span","connectedPasswordRequirements","connect","theme","ColorTheme","successRequirements","minCharacter","upperCase","lowerCase","special","number","display","padding","boxShadow","H1","color","margin","BubbleCard","label","children","className","buttonColor","selectedColor","hoverColor","borderColor","BasicButtonStyled","fontSize","size","addedStyles","setStyles","borderWidth","borderStyle","letterSpacing","fontWeight","BasicButton","type","handleClick","onClick","ADD_ENTRY","ADD_ENTRY_MIDDLE","FAILED_ENTRY","INIT_ENTRIES","REMOVE_ENTRY","REMOVE_ALL_ENTRIES","TOGGLE_THEME","UPDATE_PASSWORD","TOGGLE_REQUIREMENTS","Form","firstNameInput","React","createRef","lastNameInput","emailInput","passwordInput","FormWrapper","Input","errorStyles","outlineColor","Field","verticalAlign","marginTop","TopChild","flexBasis","Half","submitButton","ShowRequirements","float","cursor","textDecoration","userSelect","handleSubmit","event","preventDefault","id","uuid","props","addEntry","firstName","current","value","lastName","handleShowRequirement","toggleRequirements","passwordOnChange","updatePassword","this","focus","LocalStorageEntries","localStorage","getItem","JSON","parse","entries","initEntries","errorFields","undefined","failedForm","onSubmit","ref","onChange","Component","connectedForm","dispatch","entry","payload","boolean","IconButtonStyled","backgroundImage","icon","backgroundSize","backgroundRepeat","IconButton","copyColor","whiteSpace","textOverflow","removeAllButton","marginBottom","removeEntries","right","EmptyEntries","Fields","connectedDisplay","removeEntry","removeAllEntries","onRemoveAll","map","i","key","onRemoveEntry","GlobalWrapper","minHeight","WarningText","textAlign","CurrentTheme","state","toggleTheme","formatedTheme","replace","charAt","toUpperCase","slice","onClickChangeTheme","Boolean","window","location","hostname","initialState","rootReducer","action","concat","setItem","stringify","Object","assign","splice","storeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","next","errorRequirements","keys","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.898f37bc.chunk.js","sourcesContent":["const colors = {\n  white:                            '#ffffff',\n  grayApprox:                       '#818181',\n  mintCream:                        '#f5fffa',\n  babyBlue:                         '#e1fffe',\n  anakiwa:                          '#9ffffc',\n  peppermint:                       '#DEF5DE',\n  chinook:                          '#A9E5BB',\n  malachite:                        '#1cc950',\n  mountainMeadow:                   '#1AB749',\n  emerald:                          '#4CCD4B',\n  apple:                            '#46BB45',\n  flushMahogany:                    '#C93238',\n  punch:                            '#DD373D',\n  mangoTango:                       '#DC8201',\n  tangerine:                        '#F18F01',\n  stTropaz:                         '#235789',\n  mirage:                           '#161925',\n  black:                            '#000000'\n};\n\nconst colorTheme = {\n  cloud: {\n    progression:                    colors.malachite,\n    progressionHover:               colors.mountainMeadow,\n    warning:                        colors.tangerine,\n    warningHover:                   colors.mangoTango,\n    error:                          colors.punch,\n    errorHover:                     colors.flushMahogany,\n    primaryBorder:                  colors.chinook,\n    primaryShadow:                  colors.anakiwa,\n    primaryBackground:              colors.mintCream,\n    secondaryBackground:            colors.white,\n    thirdaryBackground:             colors.babyBlue,\n    primaryCopy:                    colors.black,\n    secondaryCopy:                  colors.grayApprox\n  },\n  nightVision: {\n    progression:                    colors.emerald,\n    progressionHover:               colors.apple,\n    warning:                        colors.tangerine,\n    warningHover:                   colors.mangoTango,\n    error:                          colors.punch,\n    errorHover:                     colors.flushMahogany,\n    primaryBorder:                  colors.emerald,\n    primaryShadow:                  colors.emerald,\n    primaryBackground:              colors.mirage,\n    secondaryBackground:            colors.peppermint,\n    thirdaryBackground:             colors.white,\n    primaryCopy:                    colors.stTropaz,\n    secondaryCopy:                  colors.grayApprox\n  }\n};\n\nexport default colorTheme;","export const breaks = {\n  xlBreak:        '1200px',\n  lgBreak:        '992px',\n  mdBreak:        '768px',\n  smBreak:        '576px',\n  xsBreak:        '450px'\n};\n\n/** Preset Break Points based off of the Bootstrap. */\nexport const breakPoints = {\n  breakPointXL:   ` @media (min-width: ${breaks.xlBreak})`,\n  breakPointLG:   ` @media (min-width: ${breaks.lgBreak})`,\n  breakPointMD:   ` @media (min-width: ${breaks.mdBreak})`,\n  breakPointSM:   ` @media (min-width: ${breaks.smBreak})`,\n  breakPointxs:   ` @media (min-width: ${breaks.xsBreak})`,\n  breakPointXXS:  ` @media (max-width: calc(${breaks.xsBreak} - 1px))`\n};","/** Test for valid email format. */\nexport const emailTest = (email) => {\n  const regex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return regex.test(email);\n};\n\n/** Test for name length. */\nexport const nameLengthTest = (name) => (\n  name.length < 2\n);\n\n/** Test for password length. */\nexport const passwordLengthTest = (password) => (\n  password.length >= 8\n);\n\n/** Test for a uppercase in password */\nexport const passwordUpperTest = (password) => {\n  const regex = /^(?=.*[A-Z]).+$/;\n  return regex.test(password);\n};\n\n/** Test for a lowercase in password */\nexport const passwordLowerTest = (password) => {\n  const regex = /^(?=.*[a-z]).+$/;\n  return regex.test(password);\n};\n\n/** Test for a special character in password */\nexport const passwordSpecialTest = (password) => {\n  const regex = /[-#?!@$%^&*-]/;\n  return regex.test(password);\n};\n\n/** Test for a number in password */\nexport const passwordNumberTest = (password) => {\n  const test = password.match(/\\d+/g) && password.match(/\\d+/g).length > 0\n  return (test) ? true : false;\n};","import React from 'react';\nimport styled from '@emotion/styled/macro';\nimport ColorTheme from '../themes/colors';\nimport { breaks } from '../helpers/breakpoints';\nimport { connect } from 'react-redux';\nimport {\n  passwordLengthTest,\n  passwordUpperTest,\n  passwordLowerTest,\n  passwordSpecialTest,\n  passwordNumberTest\n} from '../helpers/conditions';\n\nconst mapToStateToProps = ({ theme, password, showingRequirements }) => ({\n  theme,\n  password,\n  showingRequirements\n});\n\n/** Colors of the current theme. */\nlet colorTheme;\n\n/** Styled Styled Styled Styled Styled Styled Styled Styled */\n\n/** Deconstructing */\nconst { lgBreak, mdBreak } = breaks;\n\n/** Set height depending on break point */\nconst smallHeight = '179px';\n/** Set height depending on break point */\nconst mediumHeight = '203px';\n/** Set height depending on break point */\nconst largeHeight = '223px';\n\n/** Break Points */\nconst largeBreakpoint = `@media (min-width: ${mdBreak}) and (max-width: calc(${lgBreak} - 1px))`;\n/** Break Points */\nconst smallBreakpoint = `@media (max-width: 430px)`;\n/** Break Points */\nconst xxsBreakPoint = `@media (max-width: 331px)`;\n\n/** Param => showingRequirements: - (Boolean) - Is the PasswordRequirements component showing? */\nconst Wrapper = styled.div(({ showingRequirements }) => {\n  /** Height for a specific break point. This is required for the transition effect. */\n  const heightCondition1 = {\n    height: (showingRequirements) ? mediumHeight : '0'\n  };\n\n  /** Height for a specific break point. This is required for the transition effect. */\n  const heightCondition2 = {\n    height: (showingRequirements) ? largeHeight : '0'\n  }\n  \n  return {\n    position: 'relative',\n    overflow: 'hidden',\n    transition: 'height 0.5s ease',\n    height: (showingRequirements) ? smallHeight : '0',\n\n    /** Break Points */\n    [largeBreakpoint]: { ...heightCondition1 },\n    [smallBreakpoint]: { ...heightCondition1 },\n    [xxsBreakPoint]: { ...heightCondition2 },\n  };\n});\n\nconst Container = styled.div(() => {\n  /** Height for a specific break point. */\n  const heightCondition1 = {\n    height: `calc(${mediumHeight} - 20px)`\n  };\n\n/** Height for a specific break point. */\n  const heightCondition2 = {\n    height: `calc(${largeHeight} - 20px)`\n  };\n\n  return {\n    position: 'absolute',\n    top: '10px',\n    left: '0',\n    height: `calc(${smallHeight} - 20px)`,\n    width: '100%',\n    border: `1px solid ${colorTheme.primaryBorder}`,\n    borderRadius: '10px',\n\n    /** Break Points */\n    [largeBreakpoint]: { ...heightCondition1 },\n    [smallBreakpoint]: { ...heightCondition1 },\n    [xxsBreakPoint]: { ...heightCondition2 },\n  };\n});\n\nconst Content = styled.div({\n  height: '100%',\n  padding: '11px 15px'\n});\n\nconst Label = styled.label({\n  marginBottom: '5px',\n});\n\nconst Ul = styled.ul({\n  margin: '0'\n});\n\n/** Param => success: - (Boolean) - Has the specific requirement been met? */\nconst Li = styled.li(({ success }) => ({\n  position: 'relative',\n  listStyleType: 'none',\n  paddingLeft: '20px',\n  lineHeight: '1.3em',\n  '&::after': {\n    content: '\"\"',\n    position: 'absolute',\n    top: '6px',\n    left: '0',\n    height: '10px',\n    width: '10px',\n    borderRadius: '50%',\n    backgroundColor: (success)\n      ? colorTheme.primaryBorder : colorTheme.error\n  }\n}));\n\nconst Span = styled.span({\n  fontSize: '14px',\n  letterSpacing: '0.5px'\n});\n/** End End End End End End End End End */\n\n/** Param => state: - (Object) - The state of the Form Component. */\nconst PasswordRequirements = ({ showingRequirements, password, theme }) => {\n  colorTheme = ColorTheme[theme];\n  /** Object containing the list of requirements and whether they have succeeded or not. */\n  let successRequirements = {\n    minCharacter: passwordLengthTest(password),\n    upperCase: passwordUpperTest(password),\n    lowerCase: passwordLowerTest(password),\n    special: passwordSpecialTest(password),\n    number: passwordNumberTest(password)\n  };\n\n  /** Deconstructing */\n  const {\n    minCharacter,\n    upperCase,\n    lowerCase,\n    special,\n    number\n  } = successRequirements;\n\n  return (\n    <Wrapper showingRequirements={showingRequirements}>\n      <Container>\n        <Content>\n          <Label>The following must contain the following:</Label>\n          <Ul>\n            <Li success={minCharacter}>\n              <Span>atleast 8 characters</Span>\n            </Li>\n            <Li success={upperCase}>\n              <Span>atleast 1 uppercase</Span>\n            </Li>\n            <Li success={lowerCase}>\n              <Span>atleast 1 lowercase</Span>\n            </Li>\n            <Li success={number}>\n              <Span>atleast 1 number</Span>\n            </Li>\n            <Li success={special}>\n              <Span>atleast 1 special character</Span>\n            </Li>\n          </Ul>\n        </Content>\n      </Container>\n    </Wrapper>\n  );\n};\n\nconst connectedPasswordRequirements = connect(mapToStateToProps) (PasswordRequirements);\n\nexport default connectedPasswordRequirements;","import React from 'react';\nimport styled from '@emotion/styled/macro';\nimport ColorTheme from '../themes/colors';\n\n/** Colors of the current theme. */\nlet colorTheme;\n\n/** Styled Styled Styled Styled Styled Styled Styled Styled */\nconst Wrapper = styled.div({\n  display: 'inline-block',\n  verticalAlign: 'top',\n  marginTop: '15px',\n  padding: '15px'\n});\n\nconst Container = styled.div(() => ({\n  position: 'relative',\n  display: 'inline-block',\n  width: '100%',\n  border: `2px solid ${colorTheme.primaryBorder}`,\n  borderRadius: '10px',\n  padding: '15px 20px',\n  backgroundColor: colorTheme.secondaryBackground,\n  boxShadow: `0 0 13px ${colorTheme.primaryShadow}`\n}));\n\nconst H1 = styled.h1(() => ({\n  color: colorTheme.primaryCopy,\n  margin: '0',\n}));\n\nconst Content = styled.div({\n  margin: '15px 0'\n});\n/** End End End End End End End End End */\n\n\nconst BubbleCard = ({ label, children, theme }) => {\n  colorTheme = ColorTheme[theme];\n\n  return (\n    <Wrapper className='col-md-6'>\n      <Container>\n        <H1>{label}</H1>\n        <Content>\n          {children}\n        </Content>\n      </Container>\n    </Wrapper>\n  );\n};\n\nexport default BubbleCard;\n","import React from 'react';\nimport styled from '@emotion/styled/macro';\nimport ColorTheme from '../../themes/colors';\nimport PropTypes from 'prop-types';\nimport { buttonColor } from '../../helpers/general';\n\n/** Colors of the current theme. */\nlet colorTheme;\n\n/** Styled Styled Styled Styled Styled Styled Styled Styled */\nconst BasicButtonStyled = styled.button(({ color, size, addedStyles }) => {\n  /** Gets and stores the styles involving color. */\n  const buttonColors = buttonColor(color, colorTheme);\n  let padding, fontSize;\n\n  if(size === 'lg') {\n    padding = '10px 20px';\n    fontSize = '16px';\n  } else if(size === 'sm') {\n    padding = '5px 15px';\n    fontSize = '13px';\n  };\n\n  const setStyles = {\n    borderWidth: '1px',\n    borderStyle: 'solid',\n    borderRadius: '10px',\n    letterSpacing: '0.5px',\n    fontWeight: '600',\n    padding,\n    fontSize,\n    ...buttonColors\n  }\n\n  return {...setStyles, ...addedStyles};\n});\n/** End End End End End End End End */\n\nconst BasicButton = ({\n  theme,\n  type,\n  color,\n  size,\n  children,\n  addedStyles = null,\n  handleClick = null\n}) => {\n\ncolorTheme = ColorTheme[theme];\n\n  return (\n    <BasicButtonStyled\n      type={type}\n      color={color}\n      size={size}\n      addedStyles={addedStyles}\n      onClick={handleClick}\n      >{children}</BasicButtonStyled>\n  );\n};\n\n// FRONTEND: This is not working.\nBasicButton.propTypes = {\n  theme:          PropTypes.string.isRequired,\n  type:           PropTypes.string.isRequired,\n  color:          PropTypes.string.isRequired,\n  size:           PropTypes.string.isRequired,\n  children:       PropTypes.string.isRequired,\n  addedStyles:    PropTypes.object,\n  handleClick:    PropTypes.func,\n};\n\n\nexport default BasicButton;","/** This is used for returning the correct colors for buttons. */\nexport const buttonColor = (selectedColor, colorTheme) => {\n  let color, backgroundColor, hoverColor;\n\n  if(selectedColor === 'green') {\n    color = 'white';\n    backgroundColor = colorTheme.progression;\n    hoverColor = colorTheme.progressionHover;\n  } else if(selectedColor === 'orange') {\n    color = 'white';\n    backgroundColor = colorTheme.warning;\n    hoverColor = colorTheme.warningHover;\n  } else if(selectedColor === 'red') {\n    color = 'white';\n    backgroundColor = colorTheme.error;\n    hoverColor = colorTheme.errorHover;\n  };\n\n  return {\n    color,\n    backgroundColor,\n    borderColor: backgroundColor,\n    '&:hover': {\n      backgroundColor: hoverColor,\n      borderColor: hoverColor\n    }\n  }\n};\n\n","export const ADD_ENTRY = 'ADD_ENTRY';\nexport const ADD_ENTRY_MIDDLE = 'ADD_ENTRY_MIDDLE';\nexport const FAILED_ENTRY = 'FAILED_ENTRY';\nexport const INIT_ENTRIES = 'INIT_ENTRIES';\nexport const REMOVE_ENTRY = 'REMOVE_ENTRY';\nexport const REMOVE_ALL_ENTRIES = 'REMOVE_ALL_ENTRIES';\nexport const TOGGLE_THEME = 'TOGGLE_THEME';\nexport const UPDATE_PASSWORD = 'UPDATE_PASSWORD';\nexport const TOGGLE_REQUIREMENTS = 'TOGGLE_REQUIREMENTS';","import React from 'react';\nimport PasswordRequirements from './PasswordRequirements';\nimport BubbleCard from './BubbleCard';\nimport styled from '@emotion/styled/macro';\nimport { connect } from 'react-redux';\nimport uuid from 'uuid';\nimport BasicButton from './buttons/BasicButton';\nimport ColorTheme from '../themes/colors';\nimport {\n  addEntry,\n  initEntries,\n  updatePassword,\n  toggleRequirements\n} from '../redux/actions';\n\nconst mapToStateToProps = ({ errorFields, theme, password, showingRequirements }) => ({\n  errorFields,\n  theme,\n  password,\n  showingRequirements\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addEntry: (entry) => dispatch(addEntry(entry)),\n    initEntries: (entries) => dispatch(initEntries(entries)),\n    updatePassword: (password) => dispatch(updatePassword(password)),\n    toggleRequirements: (boolean) => dispatch(toggleRequirements(boolean))\n  };\n};\n\n/** Colors of the current theme. */\nlet colorTheme;\n\nclass Form extends React.Component {\n  /** Ref Ref Ref Ref Ref Ref Ref */\n  firstNameInput = React.createRef();\n  lastNameInput = React.createRef();\n  emailInput = React.createRef();\n  passwordInput = React.createRef();\n  /** End End End End End End End */\n\n  /** Styled Styled Styled Styled Styled Styled Styled Styled */\n  FormWrapper = styled.form({\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n  });\n  \n  Label = styled.label(() => ({\n      color: colorTheme.primaryCopy,\n      margin: '0',\n      fontWeight: '600',\n      letterSpacing: '0.5px',\n      display: 'inline-block'\n  }));\n  \n  Input = styled.input(({ error }) => {\n    /** If the field failed during the form validation process. */\n    const errorStyles = (error) ? {\n      borderColor: colorTheme.error,\n      '&:focus': { outlineColor: colorTheme.error }\n    } : null;\n\n    return {\n      color: colorTheme.primaryCopy,\n      display: 'block',\n      backgroundColor: colorTheme.thirdaryBackground,\n      border: `1px solid ${colorTheme.primaryBorder}`,\n      borderRadius: '5px',\n      padding: '10px',\n      width: '100%',\n      ...errorStyles\n    }\n  });\n  \n  Field = styled.div(({ TopChild, Half }) => ({\n    display: 'inline-block',\n    verticalAlign: 'top',\n    marginTop: (TopChild) ? '0' : '20px',\n    flexBasis: (Half) ? 'calc(50% - 10px)' : '100%'\n  }));\n\n  /** This is used in the submit button's Props. */\n  submitButton = {\n    marginTop: '30px'\n  };\n\n  ShowRequirements = styled.p(() => ({\n    color: colorTheme.primaryCopy,\n    margin: '0',\n    float: 'right',\n    fontSize: '12px',\n    fontWeight: '600',\n    letterSpacing: '0.5px',\n    marginTop: '6px',\n    cursor: 'pointer',\n    textDecoration: 'underline',\n    userSelect: 'none',\n    display: 'inline-block'\n  }));\n  /** End End End End End End End End End */\n  \n  componentDidMount() {\n    /** Applies focus on the first input. */\n    this.firstNameInput.current.focus();\n    /** Gets and stores Entries from LocalStorage. */\n    let LocalStorageEntries = localStorage.getItem('entries');\n    LocalStorageEntries = JSON.parse(LocalStorageEntries);\n    /** If there are entries in LocalStorage */\n    if(LocalStorageEntries && LocalStorageEntries.entries.length !== 0) {\n      /** Displays the entries from LocalStorage onto the Display Section. */\n      this.props.initEntries(LocalStorageEntries.entries);\n    };\n  };\n\n  /** Triggered when the the form is submited. */\n  handleSubmit = (event) => {\n    /** Prevents the page from refreshing due to the default submit functionality. */\n    event.preventDefault();\n\n    /** Creates a UUID */\n    const id = uuid();\n    /** Creates a new Entry. */\n    this.props.addEntry({\n      id,\n      firstName: this.firstNameInput.current.value,\n      lastName: this.lastNameInput.current.value,\n      email: this.emailInput.current.value,\n      password: this.passwordInput.current.value\n    });\n  };\n\n  /** Triggered when the ShowRequirement link is clicked. */\n  handleShowRequirement = (toggleRequirements) => {\n    /** Toggles the password requirements */\n    toggleRequirements();\n  };\n\n  /** Triggered when the password input value changes. */\n  passwordOnChange = (updatePassword) => {\n    /** Updates the password on the Store. */\n    updatePassword(this.passwordInput.current.value);\n  };\n\n  render() {\n    /** Deconstructing */\n    const {\n      FormWrapper,\n      Label,\n      Input,\n      Field,\n      ShowRequirements,\n      passwordOnChange,\n      handleShowRequirement,\n      handleSubmit,\n      firstNameInput,\n      lastNameInput,\n      emailInput,\n      passwordInput,\n      submitButton,\n      props: {\n        errorFields,\n        theme,\n        updatePassword,\n        showingRequirements,\n        toggleRequirements\n      }\n    } = this;\n\n    colorTheme = ColorTheme[theme];\n\n    /** If a new entry successfully got added. */\n    if(errorFields.failedForm !== undefined && !errorFields.failedForm) {\n      /** Resets input value. */\n      this.firstNameInput.current.value = '';\n      /** Resets input value. */\n      this.lastNameInput.current.value = '';\n      /** Resets input value. */\n      this.emailInput.current.value = '';\n      /** Resets input value. */\n      this.passwordInput.current.value = '';\n      /** Applies focus on the first input. */\n      this.firstNameInput.current.focus();\n      errorFields.failedForm = undefined;\n    };\n\n    /** Deconstructing */\n    const { firstName, lastName, email, password } = errorFields;\n\n    return (\n      <BubbleCard label='Form Section' theme={theme}>\n        <FormWrapper onSubmit={handleSubmit}>\n          <Field TopChild Half>\n            <Label>First Name</Label>\n            <Input\n              type='text'\n              ref={firstNameInput}\n              error={firstName}\n            />\n          </Field>\n          <Field TopChild Half>\n            <Label>Last Name</Label>\n            <Input\n              type='text'\n              ref={lastNameInput}\n              error={lastName}\n            />\n          </Field>\n          <Field>\n            <Label>Email Adress</Label>\n            <Input\n              type='email'\n              ref={emailInput}\n              error={email}\n            />\n          </Field>\n          <Field>\n            <Label>Password</Label>\n            <ShowRequirements onClick={() => (handleShowRequirement(toggleRequirements))}>\n              {(showingRequirements) ? 'Hide Requirements' : 'Show Requirements'}\n            </ShowRequirements>\n            <PasswordRequirements />\n            <Input\n              type='password'\n              ref={passwordInput}\n              error={password}\n              onChange={() => (passwordOnChange(updatePassword))}\n            />\n          </Field>\n          <BasicButton\n            type='submit'\n            color='green'\n            size='lg'\n            addedStyles={submitButton}\n            theme={theme}\n            >Submit\n          </BasicButton>\n        </FormWrapper>\n      </BubbleCard>\n    );\n  };\n};\n\nconst connectedForm = connect(mapToStateToProps, mapDispatchToProps) (Form);\n\nexport default connectedForm;","import React from 'react';\nimport styled from '@emotion/styled/macro';\nimport ColorTheme from '../../themes/colors';\nimport PropTypes from 'prop-types';\nimport { buttonColor } from '../../helpers/general';\n\n/** Colors of the current theme. */\nlet colorTheme;\n\n/** Styled Styled Styled Styled Styled Styled Styled Styled */\nexport const IconButtonStyled = styled.button(({ color, size, addedStyles, icon, theme}) => {\n  /** Gets and stores the styles involving color. */\n  const buttonColors = buttonColor(color, colorTheme);\n  let padding, borderWidth, backgroundImage;\n\n  if(size === 'lg') {\n    padding = '10px';\n    borderWidth = '8px';\n  } else if(size === 'sm') {\n    padding = '5px';\n    borderWidth = '4px';\n  };\n\n  if(icon === 'minus') {\n    backgroundImage = 'url(\"./images/minus.svg\")';\n  };\n\n  const setStyles = {\n    borderStyle: 'solid',\n    borderRadius: '50%',\n    backgroundSize: 'contain',\n    backgroundRepeat: 'no-repeat',\n    padding,\n    borderWidth,\n    backgroundImage,\n    ...buttonColors\n  }\n\n  return {...setStyles, ...addedStyles};\n});\n/** End End End End End End End End */\n\nconst IconButton = ({\n  theme,\n  type,\n  color,\n  size,\n  addedStyles = null,\n  handleClick = null,\n  icon\n}) => {\n\n  colorTheme = ColorTheme[theme];\n\n  return (\n    <IconButtonStyled\n      type={type}\n      color={color}\n      size={size}\n      addedStyles={addedStyles}\n      onClick={handleClick}\n      icon={icon}\n      theme={theme}\n    />\n  );\n};\n\n// FRONTEND: This is not working.\nIconButton.propTypes = {\n  theme:          PropTypes.string.isRequired,\n  type:           PropTypes.string.isRequired,\n  color:          PropTypes.string.isRequired,\n  size:           PropTypes.string.isRequired,\n  icon:           PropTypes.string.isRequired,\n  addedStyles:    PropTypes.object,\n  handleClick:    PropTypes.func\n};\n\nexport default IconButton;","import {\n  ADD_ENTRY_MIDDLE,\n  INIT_ENTRIES,\n  REMOVE_ENTRY,\n  REMOVE_ALL_ENTRIES,\n  TOGGLE_THEME,\n  UPDATE_PASSWORD,\n  TOGGLE_REQUIREMENTS\n} from './constants';\n\nexport function addEntry(payload) {\n  return { type: ADD_ENTRY_MIDDLE, payload };\n};\n\nexport function initEntries(payload) {\n  return { type: INIT_ENTRIES, payload };\n};\n\nexport function removeEntry(payload) {\n  return { type: REMOVE_ENTRY, payload };\n};\n\nexport function removeAllEntries() {\n  return { type: REMOVE_ALL_ENTRIES };\n};\n\nexport function toggleTheme() {\n  return { type: TOGGLE_THEME };\n};\n\nexport function updatePassword(payload) {\n  return { type: UPDATE_PASSWORD, payload };\n};\n\nexport function toggleRequirements() {\n  return { type: TOGGLE_REQUIREMENTS };\n};\n","import React from 'react';\nimport BubbleCard from './BubbleCard';\nimport { connect } from 'react-redux';\nimport styled from '@emotion/styled/macro';\nimport { removeEntry, removeAllEntries } from '../redux/actions';\nimport BasicButton from './buttons/BasicButton';\nimport IconButton from './buttons/IconButton';\nimport ColorTheme from '../themes/colors';\n\nconst mapToStateToProps = ({ entries, theme }) => ({\n  entries,\n  theme\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    removeEntry: (id) => dispatch(removeEntry(id)),\n    removeAllEntries: () => dispatch(removeAllEntries()),\n  };\n};\n/** Colors of the current theme. */\nlet colorTheme;\n\n/** Styled Styled Styled Styled Styled Styled Styled Styled */\n/** Shared color styles. */\nlet copyColor;\n\nconst fontSize = {\n  fontSize: '14px',\n  display: 'inline-block',\n  verticalAlign: 'top'\n}\n\nconst Field = styled.div(() => ({\n  'label': {\n    fontWeight: '600',\n    width: '85px',\n    margin: '0',\n    ...fontSize,\n    ...copyColor\n  },\n  'span': {\n    display: 'inline-block',\n    whiteSpace: 'nowrap',\n    textOverflow: 'ellipsis',\n    width: 'calc(100% - 110px)',\n    overflow: 'hidden',\n    ...fontSize,\n    ...copyColor\n  }\n}));\n\n/** This is used in the entry removal button's Props. */\nconst removeAllButton = {\n  marginBottom: '20px'\n};\n\n/** This is used in the removal all entries button Props. */\nconst removeEntries = {\n  position: 'absolute',\n  top: '0',\n  right: '0'\n};\n\nconst EmptyEntries = styled.p(() => ({\n    color: colorTheme.secondaryCopy\n}));\n\nconst Fields = styled.div({\n  position: 'relative'\n});\n/** End End End End End End End End End */\n\n/** Triggered when the Remove All button is clicked. */\nconst onRemoveAll = (removeAllEntries) => {\n  /** Removes all Entries. */\n  removeAllEntries();\n};\n\n/** Triggered when the remove entry button is clicked. */\nconst onRemoveEntry = (removeEntry, id) => {\n  /** Removes a single entry. */\n  removeEntry(id);\n};\n\n\nconst Display = ({ theme, entries, removeAllEntries, removeEntry }) => {\n  colorTheme = ColorTheme[theme];\n  copyColor = { color: colorTheme.primaryCopy };\n  \n  return (\n    <BubbleCard className='col-6-md' label='Display Section' theme={theme}>\n      {(entries && entries.length !== 0)\n      ? (\n        <BasicButton\n          type='button'\n          color='orange'\n          size='sm'\n          addedStyles={removeAllButton}\n          handleClick={() => {onRemoveAll(removeAllEntries)}}\n          theme={theme}\n          >Remove All!\n        </BasicButton>\n      ) : (\n        <EmptyEntries theme={theme}>There are no current entries.<br />Fill out and submit the form.</EmptyEntries>\n      )}\n      {entries.map(({ id, firstName, lastName, email, password }, i) => (\n        <div key={id}>\n          {(i > 0) && <hr />}\n          <Fields>\n            <IconButton\n              type='button'\n              color='red'\n              size='sm'\n              icon='minus'\n              addedStyles={removeEntries}\n              handleClick={() => {onRemoveEntry(removeEntry, i)}}\n              theme={theme}\n              />\n            <Field>\n              <label>UUID:</label>\n              <span>{id}</span>\n            </Field>\n            <Field>\n              <label>First Name:</label>\n              <span>{firstName}</span>\n            </Field>\n            <Field>\n              <label>Last Name:</label>\n              <span>{lastName}</span>\n            </Field>\n            <Field>\n              <label>Email:</label>\n              <span>{email}</span>\n            </Field>\n            <Field>\n              <label>Password:</label>\n              <span>{password}</span>\n            </Field>\n          </Fields>\n        </div>\n      ))}\n    </BubbleCard>\n  );\n};\n\nconst connectedDisplay = connect(mapToStateToProps, mapDispatchToProps) (Display)\n\nexport default connectedDisplay;","import React from 'react';\nimport Form from './Form';\nimport Display from './Display';\nimport styled from '@emotion/styled/macro';\nimport { connect } from 'react-redux';\nimport ColorTheme from '../themes/colors';\nimport { toggleTheme } from '../redux/actions';\n\nconst mapToStateToProps = (state) => ({ theme: state.theme });\nconst mapDispatchToProps = (dispatch) => ({ toggleTheme: () => dispatch(toggleTheme())});\n\n/** Colors of the current theme. */\nlet colorTheme;\n\n/** Styled Styled Styled Styled Styled Styled Styled Styled */\nconst GlobalWrapper = styled.div(() => ({\n  height: '100%',\n  minHeight: '100vh',\n  backgroundColor: colorTheme.primaryBackground\n}));\n\nconst WarningText = styled.div(() => ({\n  textAlign: 'center',\n  marginTop: '30px',\n  display: 'inline-block',\n  width: '100%',\n\n  'p': {\n    display: 'inline-block',\n    margin: '0',\n    color: colorTheme.warning,\n    '& + p' : { textDecoration: 'underline' }\n  }\n}));\n\nconst CurrentTheme = styled.div(() => ({\n  textAlign: 'center',\n\n  '& > *': {\n    color: `${colorTheme.progression}`,\n\n    '&:hover': {\n      color: `${colorTheme.progressionHover}`,\n    }\n  },\n\n  '& > p': {\n    display: 'block',\n    margin: '30px 0 0'\n  },\n\n  'span, span p': {\n    display: 'inline-block',\n  },\n\n  'span p': {\n    margin: '0',\n    textDecoration: 'underline',\n    cursor: 'pointer'\n  }\n}));\n/** End End End End End End End End */\n\n/** Triggered when the theme toggle link is clicked */\nconst onClickChangeTheme = (toggleTheme) => {\n  /** Toggles the theme. */\n  toggleTheme();\n};\n\nconst App = ({ theme, toggleTheme }) => {\n  colorTheme = ColorTheme[theme];\n\n  /** This splits up camel case strings. */\n  let formatedTheme = theme.replace(/([a-z])([A-Z])/g, '$1 $2');\n  /** This uppercase's the first letter of a string. */\n  formatedTheme = formatedTheme.charAt(0).toUpperCase() + formatedTheme.slice(1);\n\n  return (\n    <GlobalWrapper>\n      <div className=\"container\">\n        <WarningText>\n          <p>Warning, your password will be displayed in the Display Section.&nbsp;</p>\n          <p>Do not use any personal Passwords.</p>\n        </WarningText>\n        <CurrentTheme>\n          <p>You are currently in the <strong>{formatedTheme}</strong> theme.</p>\n          <span>Click&nbsp;\n            <p onClick={() => (onClickChangeTheme(toggleTheme))}>here</p>\n          </span>\n          <span>&nbsp;to switch theme.</span>\n        </CurrentTheme>\n        <Form />\n        <Display />\n      </div>\n    </GlobalWrapper>\n  );\n};\n\nconst connectedForm = connect(mapToStateToProps, mapDispatchToProps) (App);\n\nexport default connectedForm;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  ADD_ENTRY,\n  FAILED_ENTRY,\n  INIT_ENTRIES,\n  REMOVE_ENTRY,\n  REMOVE_ALL_ENTRIES,\n  TOGGLE_THEME,\n  UPDATE_PASSWORD,\n  TOGGLE_REQUIREMENTS\n} from './constants';\n\nconst initialState = {\n  entries: [],\n  theme: 'cloud',\n  errorFields: {},\n  password: '',\n  showingRequirements: false\n};\n\n// Look into moving some of this logic into the middleware.\nfunction rootReducer(state = initialState, action) {\n  const { type, payload } = action;\n\n  /** ADD_ENTRY - ADD_ENTRY - ADD_ENTRY - ADD_ENTRY - ADD_ENTRY */\n  if(type === ADD_ENTRY) {\n    /** Adding the new list to the old one. */\n    const entries = state.entries.concat(payload.entries);\n    /** Setting the entries to LocalStorage */\n    localStorage.setItem('entries', JSON.stringify({ entries }));\n\n    return Object.assign({}, state, {\n      entries,\n      errorFields: { ...state.errorFields, ...payload.errorFields },\n      password: ''\n    });\n\n  /** FAILED_ENTRY - FAILED_ENTRY - FAILED_ENTRY - FAILED_ENTRY */\n  } else if(type === FAILED_ENTRY) {\n    return Object.assign({}, state, {\n      errorFields: { ...payload.errorFields }\n    });\n\n  /** INIT_ENTRIES - INIT_ENTRIES - INIT_ENTRIES - INIT_ENTRIES */\n  } else if(type === INIT_ENTRIES) {\n    return Object.assign({}, state, {\n      entries: state.entries.concat(payload)\n    });\n\n  /** REMOVE_ENTRY - REMOVE_ENTRY - REMOVE_ENTRY - REMOVE_ENTRY */\n  } else if(type === REMOVE_ENTRY) {\n    /** Copying and pasting Entries into its own constant. */\n    const entries = [...state.entries];\n\n    /** The payload here is the index of the array item. */\n    entries.splice(payload, 1);\n    localStorage.setItem('entries', JSON.stringify({ entries }));\n\n    return Object.assign({}, state, { entries });\n\n  /** REMOVE_ALL_ENTRIES - REMOVE_ALL_ENTRIES - REMOVE_ALL_ENTRIES */\n  } else if(type === REMOVE_ALL_ENTRIES) {\n    const entries = [];\n    /** Setting the entries to LocalStorage */\n    localStorage.setItem('entries', JSON.stringify(entries));\n\n    return Object.assign({}, state, { entries });\n\n  /** TOGGLE_THEME - TOGGLE_THEME - TOGGLE_THEME - TOGGLE_THEME */\n  } else if(type === TOGGLE_THEME) {\n    /** Toggling in between two themes. */\n    const theme = (state.theme === 'cloud')\n      ? 'nightVision' : 'cloud';\n\n    return Object.assign({}, state, { theme });\n\n  /** UPDATE_PASSWORD - UPDATE_PASSWORD - UPDATE_PASSWORD - UPDATE_PASSWORD */\n  } else if(type === UPDATE_PASSWORD) {\n    return Object.assign({}, state, { password: payload });\n\n  /** TOGGLE_REQUIREMENTS - TOGGLE_REQUIREMENTS - TOGGLE_REQUIREMENTS */\n  } else if(type === TOGGLE_REQUIREMENTS) {\n    /** Toggling in between two options. */\n    const showingRequirements = (state.showingRequirements) ? false : true;\n\n    return Object.assign({}, state, { showingRequirements })\n  };\n\n  return state;\n};\n\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport { formValidation } from './middleware';\n\nconst storeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  storeEnhancers(applyMiddleware(formValidation, thunk))\n);\n\nexport default store;","import {\n  ADD_ENTRY,\n  FAILED_ENTRY,\n  ADD_ENTRY_MIDDLE\n} from './constants';\nimport {\n  nameLengthTest,\n  emailTest,\n  passwordLengthTest,\n  passwordUpperTest,\n  passwordLowerTest,\n  passwordSpecialTest,\n  passwordNumberTest\n} from '../helpers/conditions';\n\nexport function formValidation({ dispatch }) {\n  return function(next) {\n    return function(action) {\n      if(action.type === ADD_ENTRY_MIDDLE) {\n        /** Deconstructing */\n        const { firstName, lastName, email, password} = action.payload;\n        /** Object that contains all of the fields statuses including the forms status. */\n        let errorRequirements = {};\n        \n        /** Form validation on submit => First Name */\n        errorRequirements.firstName = nameLengthTest(firstName);\n        /** Form validation on submit => Last Name */\n        errorRequirements.lastName = nameLengthTest(lastName);\n        /** Form validation on submit => Email */\n        errorRequirements.email = emailTest(email)\n          ? false : true;\n        /** Form validation on submit => Password */\n        errorRequirements.password = (\n          passwordLengthTest(password)\n          && passwordUpperTest(password)\n          && passwordLowerTest(password)\n          && passwordSpecialTest(password)\n          && passwordNumberTest(password)\n        ) ? false : true\n        /** Sets the default value before iteration. */\n        errorRequirements.failedForm = false;\n        Object.keys(errorRequirements).map((key) => {\n          if(errorRequirements[key]) { errorRequirements.failedForm = true };\n        });\n\n        /** Pre-building the payload. */\n        const payload = {\n          entries: action.payload,\n          errorFields: errorRequirements\n        };\n\n        /** If the form failed in any of the fields. */\n        if(errorRequirements.failedForm) {\n          return dispatch({ type: FAILED_ENTRY, payload });\n\n        } else {\n          return dispatch({ type: ADD_ENTRY, payload });\n        };\n      };\n      return next(action);\n    };\n  };\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/normalizer.scss';\nimport App from './components/App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/stores';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}