{"version":3,"sources":["components/BubbleCard/BubbleCard.js","components/buttons/BasicButton.js","themes/colors.js","helpers/general.js","components/PasswordRequirements/PasswordRequirements.js","helpers/breakpoints.js","helpers/conditions.js","components/Input/Input.js","components/CreatePassword/CreatePassword.js","redux/constants.js","redux/actions.js","components/CreatePassword/CreatePassword.container.js","components/Form/Form.js","components/buttons/IconButton.js","components/Form/Form.container.js","components/Display/Display.js","components/App/App.js","components/Display/Display.container.js","components/App/App.container.js","serviceWorker.js","redux/reducers.js","redux/stores.js","redux/middleware.js","index.js"],"names":["colorTheme","colors","cloud","progression","progressionHover","warning","warningHover","error","errorHover","primaryBorder","primaryShadow","primaryBackground","secondaryBackground","thirdaryBackground","primaryCopy","secondaryCopy","nightVision","Wrapper","Container","position","display","width","border","borderRadius","padding","backgroundColor","boxShadow","H1","color","margin","Content","BubbleCard","label","children","theme","ColorTheme","className","buttonColor","selectedColor","hoverColor","borderColor","BasicButtonStyled","fontSize","size","addedStyles","setStyles","borderWidth","borderStyle","letterSpacing","fontWeight","BasicButton","type","handleClick","onClick","breaks","emailTest","email","test","nameLengthTest","name","length","passwordLengthTest","password","passwordUpperTest","passwordLowerTest","passwordSpecialTest","passwordNumberTest","match","lgBreak","largeBreakpoint","showingRequirements","heightCondition1","height","heightCondition2","overflow","transition","top","left","Label","Ul","Li","listStyleType","paddingLeft","lineHeight","content","success","Span","PasswordRequirements","successRequirements","minCharacter","upperCase","lowerCase","special","number","Input","refInput","React","createRef","InputStyled","errorStyles","outlineColor","updateInputValue","updateInput","props","current","value","this","giveFocus","ref","onChange","Component","CreatePassword","ShowRequirements","float","marginTop","cursor","textDecoration","userSelect","handleShowRequirement","toggleRequirements","passwordOnChange","updatePassword","passwordInput","updateForm","errorFields","ADD_ENTRY","INIT_ENTRIES","REMOVE_ENTRY","REMOVE_ALL_ENTRIES","TOGGLE_THEME","UPDATE_FORM","TOGGLE_REQUIREMENTS","payload","connect","form","dispatch","Form","letFocus","FormWrapper","Field","verticalAlign","TopChild","flexBasis","Half","submitButton","handleSubmit","event","preventDefault","addEntry","id","uuid","status","giveInputFocus","input","focus","LocalStorageEntries","localStorage","getItem","JSON","parse","entries","initEntries","firstName","lastName","onSubmit","entry","copyColor","IconButtonStyled","backgroundImage","icon","backgroundSize","backgroundRepeat","IconButton","whiteSpace","textOverflow","removeAllButton","marginBottom","removeEntries","right","EmptyEntries","Fields","Display","removeAllEntries","removeEntry","onRemoveAll","map","i","key","onRemoveEntry","GlobalWrapper","minHeight","WarningText","textAlign","CurrentTheme","App","toggleTheme","formatedTheme","replace","charAt","toUpperCase","slice","onClickChangeTheme","Boolean","window","location","hostname","initialState","rootReducer","state","action","changes","concat","setItem","stringify","Object","assign","splice","newState","storeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","next","errorRequirements","failedForm","keys","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f56d94c.chunk.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled/macro';\nimport ColorTheme from '../../themes/colors';\n\n/** Colors of the current theme. */\nlet colorTheme;\n\n/** Styled Styled Styled Styled Styled Styled Styled Styled */\nconst Wrapper = styled.div({\n  display: 'inline-block',\n  verticalAlign: 'top',\n  marginTop: '15px',\n  padding: '15px'\n});\n\nconst Container = styled.div(() => ({\n  position: 'relative',\n  display: 'inline-block',\n  width: '100%',\n  border: `2px solid ${colorTheme.primaryBorder}`,\n  borderRadius: '10px',\n  padding: '15px 20px',\n  backgroundColor: colorTheme.secondaryBackground,\n  boxShadow: `0 0 13px ${colorTheme.primaryShadow}`\n}));\n\nconst H1 = styled.h1(() => ({\n  color: colorTheme.primaryCopy,\n  margin: '0',\n}));\n\nconst Content = styled.div({\n  margin: '15px 0'\n});\n/** End End End End End End End End End */\n\n\nconst BubbleCard = ({ label, children, theme }) => {\n  colorTheme = ColorTheme[theme];\n\n  return (\n    <Wrapper className='col-md-6'>\n      <Container>\n        <H1>{label}</H1>\n        <Content>\n          {children}\n        </Content>\n      </Container>\n    </Wrapper>\n  );\n};\n\nexport default BubbleCard;\n","import React from 'react';\nimport styled from '@emotion/styled/macro';\nimport ColorTheme from '../../themes/colors';\nimport PropTypes from 'prop-types';\nimport { buttonColor } from '../../helpers/general';\n\n/** Colors of the current theme. */\nlet colorTheme;\n\n/** Styled Styled Styled Styled Styled Styled Styled Styled */\nconst BasicButtonStyled = styled.button(({ color, size, addedStyles }) => {\n  /** Gets and stores the styles involving color. */\n  const buttonColors = buttonColor(color, colorTheme);\n  let padding, fontSize;\n\n  if(size === 'lg') {\n    padding = '10px 20px';\n    fontSize = '16px';\n  } else if(size === 'sm') {\n    padding = '5px 15px';\n    fontSize = '13px';\n  };\n\n  const setStyles = {\n    borderWidth: '1px',\n    borderStyle: 'solid',\n    borderRadius: '10px',\n    letterSpacing: '0.5px',\n    fontWeight: '600',\n    padding,\n    fontSize,\n    ...buttonColors\n  }\n\n  return {...setStyles, ...addedStyles};\n});\n/** End End End End End End End End */\n\nconst BasicButton = ({\n  theme,\n  type,\n  color,\n  size,\n  children,\n  addedStyles = null,\n  handleClick = null\n}) => {\n\ncolorTheme = ColorTheme[theme];\n\n  return (\n    <BasicButtonStyled\n      type={type}\n      color={color}\n      size={size}\n      addedStyles={addedStyles}\n      onClick={handleClick}\n      >{children}</BasicButtonStyled>\n  );\n};\n\n// FRONTEND: This is not working.\nBasicButton.propTypes = {\n  theme:          PropTypes.string.isRequired,\n  type:           PropTypes.string.isRequired,\n  color:          PropTypes.string.isRequired,\n  size:           PropTypes.string.isRequired,\n  children:       PropTypes.string.isRequired,\n  addedStyles:    PropTypes.object,\n  handleClick:    PropTypes.func,\n};\n\n\nexport default BasicButton;","const colors = {\n  white:                            '#ffffff',\n  grayApprox:                       '#818181',\n  mintCream:                        '#f5fffa',\n  babyBlue:                         '#e1fffe',\n  anakiwa:                          '#9ffffc',\n  peppermint:                       '#DEF5DE',\n  chinook:                          '#A9E5BB',\n  malachite:                        '#1cc950',\n  mountainMeadow:                   '#1AB749',\n  emerald:                          '#4CCD4B',\n  apple:                            '#46BB45',\n  flushMahogany:                    '#C93238',\n  punch:                            '#DD373D',\n  mangoTango:                       '#DC8201',\n  tangerine:                        '#F18F01',\n  stTropaz:                         '#235789',\n  mirage:                           '#161925',\n  black:                            '#000000'\n};\n\nconst colorTheme = {\n  cloud: {\n    progression:                    colors.malachite,\n    progressionHover:               colors.mountainMeadow,\n    warning:                        colors.tangerine,\n    warningHover:                   colors.mangoTango,\n    error:                          colors.punch,\n    errorHover:                     colors.flushMahogany,\n    primaryBorder:                  colors.chinook,\n    primaryShadow:                  colors.anakiwa,\n    primaryBackground:              colors.mintCream,\n    secondaryBackground:            colors.white,\n    thirdaryBackground:             colors.babyBlue,\n    primaryCopy:                    colors.black,\n    secondaryCopy:                  colors.grayApprox\n  },\n  nightVision: {\n    progression:                    colors.emerald,\n    progressionHover:               colors.apple,\n    warning:                        colors.tangerine,\n    warningHover:                   colors.mangoTango,\n    error:                          colors.punch,\n    errorHover:                     colors.flushMahogany,\n    primaryBorder:                  colors.emerald,\n    primaryShadow:                  colors.emerald,\n    primaryBackground:              colors.mirage,\n    secondaryBackground:            colors.peppermint,\n    thirdaryBackground:             colors.white,\n    primaryCopy:                    colors.stTropaz,\n    secondaryCopy:                  colors.grayApprox\n  }\n};\n\nexport default colorTheme;","/** This is used for returning the correct colors for buttons. */\nexport const buttonColor = (selectedColor, colorTheme) => {\n  let color, backgroundColor, hoverColor;\n\n  if(selectedColor === 'green') {\n    color = 'white';\n    backgroundColor = colorTheme.progression;\n    hoverColor = colorTheme.progressionHover;\n  } else if(selectedColor === 'orange') {\n    color = 'white';\n    backgroundColor = colorTheme.warning;\n    hoverColor = colorTheme.warningHover;\n  } else if(selectedColor === 'red') {\n    color = 'white';\n    backgroundColor = colorTheme.error;\n    hoverColor = colorTheme.errorHover;\n  };\n\n  return {\n    color,\n    backgroundColor,\n    borderColor: backgroundColor,\n    '&:hover': {\n      backgroundColor: hoverColor,\n      borderColor: hoverColor\n    }\n  }\n};\n\n","import React from 'react';\nimport styled from '@emotion/styled/macro';\nimport ColorTheme from '../../themes/colors';\nimport { breaks } from '../../helpers/breakpoints';\nimport {\n  passwordLengthTest,\n  passwordUpperTest,\n  passwordLowerTest,\n  passwordSpecialTest,\n  passwordNumberTest\n} from '../../helpers/conditions';\n\n/** Colors of the current theme. */\nlet colorTheme;\n\n/** Styled Styled Styled Styled Styled Styled Styled Styled */\n/** Deconstructing */\nconst { lgBreak, mdBreak } = breaks;\n/** Set height depending on break point */\nconst smallHeight = '179px';\n/** Set height depending on break point */\nconst mediumHeight = '203px';\n/** Set height depending on break point */\nconst largeHeight = '223px';\n\n/** Break Points */\nconst largeBreakpoint = `@media (min-width: ${mdBreak}) and (max-width: calc(${lgBreak} - 1px))`;\n/** Break Points */\nconst smallBreakpoint = `@media (max-width: 430px)`;\n/** Break Points */\nconst xxsBreakPoint = `@media (max-width: 331px)`;\n\n/** Param => showingRequirements: - (Boolean) - Is the PasswordRequirements component showing? */\nconst Wrapper = styled.div(({ showingRequirements }) => {\n  /** Height for a specific break point. This is required for the transition effect. */\n  const heightCondition1 = {\n    height: (showingRequirements) ? mediumHeight : '0'\n  };\n\n  /** Height for a specific break point. This is required for the transition effect. */\n  const heightCondition2 = {\n    height: (showingRequirements) ? largeHeight : '0'\n  }\n  \n  return {\n    position: 'relative',\n    overflow: 'hidden',\n    transition: 'height 0.5s ease',\n    height: (showingRequirements) ? smallHeight : '0',\n\n    /** Break Points */\n    [largeBreakpoint]: { ...heightCondition1 },\n    [smallBreakpoint]: { ...heightCondition1 },\n    [xxsBreakPoint]: { ...heightCondition2 },\n  };\n});\n\nconst Container = styled.div(() => {\n  /** Height for a specific break point. */\n  const heightCondition1 = {\n    height: `calc(${mediumHeight} - 20px)`\n  };\n\n/** Height for a specific break point. */\n  const heightCondition2 = {\n    height: `calc(${largeHeight} - 20px)`\n  };\n\n  return {\n    position: 'absolute',\n    top: '10px',\n    left: '0',\n    height: `calc(${smallHeight} - 20px)`,\n    width: '100%',\n    border: `1px solid ${colorTheme.primaryBorder}`,\n    borderRadius: '10px',\n\n    /** Break Points */\n    [largeBreakpoint]: { ...heightCondition1 },\n    [smallBreakpoint]: { ...heightCondition1 },\n    [xxsBreakPoint]: { ...heightCondition2 },\n  };\n});\n\nconst Content = styled.div({\n  height: '100%',\n  padding: '11px 15px'\n});\n\nconst Label = styled.label({\n  marginBottom: '5px',\n});\n\nconst Ul = styled.ul({\n  margin: '0'\n});\n\n/** Param => success: - (Boolean) - Has the specific requirement been met? */\nconst Li = styled.li(({ success }) => ({\n  position: 'relative',\n  listStyleType: 'none',\n  paddingLeft: '20px',\n  lineHeight: '1.3em',\n  '&::after': {\n    content: '\"\"',\n    position: 'absolute',\n    top: '6px',\n    left: '0',\n    height: '10px',\n    width: '10px',\n    borderRadius: '50%',\n    backgroundColor: (success)\n      ? colorTheme.primaryBorder : colorTheme.error\n  }\n}));\n\nconst Span = styled.span({\n  fontSize: '14px',\n  letterSpacing: '0.5px'\n});\n/** End End End End End End End End End */\n\nconst PasswordRequirements = ({ showingRequirements, password, theme }) => {\n  /** Object containing the list of requirements and whether they have succeeded or not. */\n  let successRequirements = {\n    minCharacter: passwordLengthTest(password),\n    upperCase: passwordUpperTest(password),\n    lowerCase: passwordLowerTest(password),\n    special: passwordSpecialTest(password),\n    number: passwordNumberTest(password)\n  };\n\n  /** Deconstructing */\n  const {\n    minCharacter,\n    upperCase,\n    lowerCase,\n    special,\n    number\n  } = successRequirements;\n\n  colorTheme = ColorTheme[theme];\n\n  return (\n    <Wrapper showingRequirements={showingRequirements}>\n      <Container>\n        <Content>\n          <Label>The following must contain the following:</Label>\n          <Ul>\n            <Li success={minCharacter}>\n              <Span>atleast 8 characters</Span>\n            </Li>\n            <Li success={upperCase}>\n              <Span>atleast 1 uppercase</Span>\n            </Li>\n            <Li success={lowerCase}>\n              <Span>atleast 1 lowercase</Span>\n            </Li>\n            <Li success={number}>\n              <Span>atleast 1 number</Span>\n            </Li>\n            <Li success={special}>\n              <Span>atleast 1 special character</Span>\n            </Li>\n          </Ul>\n        </Content>\n      </Container>\n    </Wrapper>\n  );\n};\n\nexport default PasswordRequirements;","export const breaks = {\n  xlBreak:        '1200px',\n  lgBreak:        '992px',\n  mdBreak:        '768px',\n  smBreak:        '576px',\n  xsBreak:        '450px'\n};\n\n/** Preset Break Points based off of the Bootstrap. */\nexport const breakPoints = {\n  breakPointXL:   ` @media (min-width: ${breaks.xlBreak})`,\n  breakPointLG:   ` @media (min-width: ${breaks.lgBreak})`,\n  breakPointMD:   ` @media (min-width: ${breaks.mdBreak})`,\n  breakPointSM:   ` @media (min-width: ${breaks.smBreak})`,\n  breakPointxs:   ` @media (min-width: ${breaks.xsBreak})`,\n  breakPointXXS:  ` @media (max-width: calc(${breaks.xsBreak} - 1px))`\n};","/** Test for valid email format. */\nexport const emailTest = (email) => {\n  const regex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return regex.test(email);\n};\n\n/** Test for name length. */\nexport const nameLengthTest = (name) => (\n  name.length < 2\n);\n\n/** Test for password length. */\nexport const passwordLengthTest = (password) => (\n  password.length >= 8\n);\n\n/** Test for a uppercase in password */\nexport const passwordUpperTest = (password) => {\n  const regex = /^(?=.*[A-Z]).+$/;\n  return regex.test(password);\n};\n\n/** Test for a lowercase in password */\nexport const passwordLowerTest = (password) => {\n  const regex = /^(?=.*[a-z]).+$/;\n  return regex.test(password);\n};\n\n/** Test for a special character in password */\nexport const passwordSpecialTest = (password) => {\n  const regex = /[-#?!@$%^&*-]/;\n  return regex.test(password);\n};\n\n/** Test for a number in password */\nexport const passwordNumberTest = (password) => {\n  const test = password.match(/\\d+/g) && password.match(/\\d+/g).length > 0\n  return (test) ? true : false;\n};","import React from 'react';\nimport styled from '@emotion/styled/macro';\nimport ColorTheme from '../../themes/colors';\n// import { is } from '@babel/types';\n\n/** Colors of the current theme. */\nlet colorTheme;\n\nclass Input extends React.Component {\n\n  /** Ref Ref Ref Ref Ref Ref Ref */\n  refInput = React.createRef();\n  /** End End End End End End End */\n\n  /** Styled Styled Styled Styled Styled Styled Styled Styled */\n  InputStyled = styled.input(({ error, addedStyles = null }) => {\n\n    /** If the this input failed to meet the requirements. */\n    const errorStyles = (error) ? {\n      borderColor: colorTheme.error,\n      '&:focus': { outlineColor: colorTheme.error }\n    } : null;\n\n    return {\n      color: colorTheme.primaryCopy,\n      display: 'block',\n      backgroundColor: colorTheme.thirdaryBackground,\n      border: `1px solid ${colorTheme.primaryBorder}`,\n      borderRadius: '5px',\n      padding: '10px',\n      width: '100%',\n      ...errorStyles,\n      ...addedStyles\n    }\n  });\n  /** End End End End End End End End */\n\n  componentDidMount() {\n    /** Deconstructing */\n    const {\n      refInput,\n      props: {\n        value,\n        giveFocus\n      }\n    } = this;\n\n    refInput.current.value = value;\n    (giveFocus) && giveFocus(refInput.current);\n  };\n\n  updateInputValue = (name) => {\n    /** Deconstructing */\n    const { refInput, props: { updateInput } } = this;\n    /** Updates the form's field in the store. */\n    updateInput(name, refInput.current.value);\n  };\n\n  render() {\n    /** Deconstructing */\n    const {\n      InputStyled,\n      refInput,\n      updateInputValue,\n      props: {\n        name,\n        type,\n        theme,\n        addedStyles = null,\n        giveFocus = null,\n        error,\n        value = ''\n      }\n    } = this;\n\n    colorTheme = ColorTheme[theme];\n\n    if(refInput.current) {\n      /** If the input has already been created */\n      if(refInput.current.value) {\n        /** Sets the value of the input incase the value changes. */\n        refInput.current.value = value;\n      };\n\n      /** Re set the the focus on the desired input. */\n      if(giveFocus) {\n        giveFocus(refInput.current);\n      };\n    };\n\n    return (\n      <InputStyled\n        type={type}\n        addedStyles={addedStyles}\n        ref={refInput}\n        onChange={() => (updateInputValue(name))}\n        error={error}\n      />\n    );\n  };\n};\n\nexport default Input;","import React from 'react';\nimport styled from '@emotion/styled/macro';\nimport ColorTheme from '../../themes/colors';\nimport PasswordRequirements from '../PasswordRequirements/PasswordRequirements';\nimport Input from '../Input/Input';\n\nlet colorTheme;\n\nclass CreatePassword extends React.Component {\n  /** Styled Styled Styled Styled Styled Styled Styled Styled */\n  ShowRequirements = styled.p(() => ({\n    color: colorTheme.primaryCopy,\n    margin: '0',\n    float: 'right',\n    fontSize: '12px',\n    fontWeight: '600',\n    letterSpacing: '0.5px',\n    marginTop: '6px',\n    cursor: 'pointer',\n    textDecoration: 'underline',\n    userSelect: 'none',\n    display: 'inline-block'\n  }));\n  /** End End End End End End End End End */\n\n  /** Triggered when the ShowRequirement link is clicked. */\n  handleShowRequirement = (toggleRequirements) => {\n    /** Toggles the password requirements */\n    toggleRequirements();\n  };\n\n  /** Triggered when the password input value changes. */\n  passwordOnChange = (updatePassword) => {\n    /** Updates the password on the Store. */\n    updatePassword(this.passwordInput.current.value);\n  };\n\n  updateInput = (name, value) => {\n    const { updateForm } = this.props;\n    /** Updates the password on the Store. */\n    updateForm({ name, value });\n  };\n\n  render() {\n    /** Deconstructing */\n    const {\n      ShowRequirements,\n      handleShowRequirement,\n      updateInput,\n      props: {\n        errorFields,\n        theme,\n        showingRequirements,\n        toggleRequirements,\n        password\n      }\n    } = this;\n    \n    colorTheme = ColorTheme[theme];\n\n    return (\n      <div>\n        <label>Password</label>\n        <ShowRequirements\n          onClick={() => (handleShowRequirement(toggleRequirements))}\n        >\n          {(showingRequirements) ? 'Hide Requirements' : 'Show Requirements'}\n        </ShowRequirements>\n        <PasswordRequirements\n          theme={theme}\n          password={password}\n          showingRequirements={showingRequirements} />\n        <Input\n          type='password'\n          name='password'\n          error={errorFields.password}\n          updateInput={updateInput}\n          value={password}\n          theme={theme} />\n      </div>\n    );\n  };\n};\n\nexport default CreatePassword;","export const ADD_ENTRY = 'ADD_ENTRY';\nexport const INIT_ENTRIES = 'INIT_ENTRIES';\nexport const REMOVE_ENTRY = 'REMOVE_ENTRY';\nexport const REMOVE_ALL_ENTRIES = 'REMOVE_ALL_ENTRIES';\nexport const TOGGLE_THEME = 'TOGGLE_THEME';\nexport const UPDATE_FORM = 'UPDATE_FORM';\nexport const TOGGLE_REQUIREMENTS = 'TOGGLE_REQUIREMENTS';","import {\n  ADD_ENTRY,\n  INIT_ENTRIES,\n  REMOVE_ENTRY,\n  REMOVE_ALL_ENTRIES,\n  TOGGLE_THEME,\n  UPDATE_FORM,\n  TOGGLE_REQUIREMENTS\n} from './constants';\n\nexport function addEntry(payload) {\n  return { type: ADD_ENTRY, payload };\n};\n\nexport function initEntries(payload) {\n  return { type: INIT_ENTRIES, payload };\n};\n\nexport function removeEntry(payload) {\n  return { type: REMOVE_ENTRY, payload };\n};\n\nexport function removeAllEntries() {\n  return { type: REMOVE_ALL_ENTRIES };\n};\n\nexport function toggleTheme() {\n  return { type: TOGGLE_THEME };\n};\n\nexport function updateForm(payload) {\n  return { type: UPDATE_FORM, payload };\n};\n\nexport function toggleRequirements() {\n  return { type: TOGGLE_REQUIREMENTS };\n};\n","import CreatePassword from './CreatePassword';\nimport { connect } from 'react-redux';\nimport {\n  updateForm,\n  toggleRequirements\n} from '../../redux/actions';\n\nconst mapToStateToProps = ({\n  errorFields,\n  theme,\n  form: { password },\n  showingRequirements\n}) => ({\n  errorFields,\n  theme,\n  password,\n  showingRequirements\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateForm: (payload) => dispatch(updateForm(payload)),\n  toggleRequirements: () => dispatch(toggleRequirements())\n});\n\nexport default connect(\n  mapToStateToProps,\n  mapDispatchToProps\n) (CreatePassword);","import React from 'react';\nimport BubbleCard from '../BubbleCard';\nimport styled from '@emotion/styled/macro';\nimport uuid from 'uuid';\nimport BasicButton from '../buttons/BasicButton';\nimport ColorTheme from '../../themes/colors';\nimport CreatePassword from '../CreatePassword';\nimport Input from '../Input/Input';\n\n/** Colors of the current theme. */\nlet colorTheme;\n\nclass Form extends React.Component {\n  letFocus = true\n\n  /** Styled Styled Styled Styled Styled Styled Styled Styled */\n  FormWrapper = styled.form({\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n  });\n  \n  Field = styled.div(({ TopChild, Half }) => ({\n    display: 'inline-block',\n    verticalAlign: 'top',\n    marginTop: (TopChild) ? '0' : '20px',\n    flexBasis: (Half) ? 'calc(50% - 10px)' : '100%',\n\n    'label': {\n      color: colorTheme.primaryCopy,\n      margin: '0',\n      fontWeight: '600',\n      letterSpacing: '0.5px',\n      display: 'inline-block'\n    }\n  }));\n\n  /** This is used in the submit button's Props. */\n  submitButton = {\n    marginTop: '30px'\n  };\n  /** End End End End End End End End End */\n  \n  componentDidMount() {\n    /** Gets and stores Entries from LocalStorage. */\n    let LocalStorageEntries = localStorage.getItem('entries');\n    LocalStorageEntries = JSON.parse(LocalStorageEntries);\n    /** If there are entries in LocalStorage */\n    if(LocalStorageEntries && LocalStorageEntries.entries.length !== 0) {\n      /** Displays the entries from LocalStorage onto the Display Section. */\n      this.props.initEntries(LocalStorageEntries.entries);\n    };\n  };\n\n  /** Triggered when the the form is submited. */\n  handleSubmit = (event) => {\n    /** Prevents the page from refreshing due to the default submit functionality. */\n    event.preventDefault();\n\n    const { props: { form, addEntry, updateForm } } = this;\n    /** Creates a UUID */\n    const id = uuid();\n\n    /** Creates a new Entry. */\n    const res = addEntry({\n      id,\n      ...form\n    });\n\n    if(res.status === 'success') {\n      updateForm({ name: 'reset' });\n      this.letFocus = true;\n    };\n  };\n\n  updateInput = (name, value) => {\n    let { updateForm } = this.props;\n    updateForm({ name, value });\n    this.giveFocus = false;\n  };\n\n  giveInputFocus = (input) => {\n    if(this.letFocus) {\n      input.focus();\n      this.letFocus = false;\n    };\n  };\n\n  render() {\n    /** Deconstructing */\n    const {\n      FormWrapper,\n      Field,\n      handleSubmit,\n      submitButton,\n      updateInput,\n      giveInputFocus,\n      props: {\n        errorFields,\n        theme,\n        firstName,\n        lastName,\n        email\n      }\n    } = this;\n\n    colorTheme = ColorTheme[theme];\n\n    return (\n      <BubbleCard label='Form Section' theme={theme}>\n        <FormWrapper onSubmit={(event) => (handleSubmit(event))}>\n          <Field TopChild Half>\n            <label>First Name</label>\n            <Input\n              type='text'\n              name='firstName'\n              error={errorFields.firstName}\n              updateInput={updateInput}\n              value={firstName}\n              theme={theme}\n              giveFocus={giveInputFocus}\n            />\n          </Field>\n          <Field TopChild Half>\n            <label>Last Name</label>\n            <Input\n              type='text'\n              name='lastName'\n              error={errorFields.lastName}\n              updateInput={updateInput}\n              value={lastName}\n              theme={theme}\n            />\n          </Field>\n          <Field>\n            <label>Email Adress</label>\n            <Input\n              type='email'\n              name='email'\n              error={errorFields.email}\n              updateInput={updateInput}\n              value={email}\n              theme={theme}\n            />\n          </Field>\n          <Field>\n            <CreatePassword />\n          </Field>\n          <BasicButton\n            type='submit'\n            color='green'\n            size='lg'\n            addedStyles={submitButton}\n            theme={theme}\n            >Submit\n          </BasicButton>\n        </FormWrapper>\n      </BubbleCard>\n    );\n  };\n};\n\nexport default Form;","import React from 'react';\nimport styled from '@emotion/styled/macro';\nimport ColorTheme from '../../themes/colors';\nimport PropTypes from 'prop-types';\nimport { buttonColor } from '../../helpers/general';\n\n/** Colors of the current theme. */\nlet colorTheme;\n\n/** Styled Styled Styled Styled Styled Styled Styled Styled */\nexport const IconButtonStyled = styled.button(({ color, size, addedStyles, icon, theme}) => {\n  /** Gets and stores the styles involving color. */\n  const buttonColors = buttonColor(color, colorTheme);\n  let padding, borderWidth, backgroundImage;\n\n  if(size === 'lg') {\n    padding = '10px';\n    borderWidth = '8px';\n  } else if(size === 'sm') {\n    padding = '5px';\n    borderWidth = '4px';\n  };\n\n  if(icon === 'minus') {\n    backgroundImage = 'url(\"./images/minus.svg\")';\n  };\n\n  const setStyles = {\n    borderStyle: 'solid',\n    borderRadius: '50%',\n    backgroundSize: 'contain',\n    backgroundRepeat: 'no-repeat',\n    padding,\n    borderWidth,\n    backgroundImage,\n    ...buttonColors\n  }\n\n  return {...setStyles, ...addedStyles};\n});\n/** End End End End End End End End */\n\nconst IconButton = ({\n  theme,\n  type,\n  color,\n  size,\n  addedStyles = null,\n  handleClick = null,\n  icon\n}) => {\n\n  colorTheme = ColorTheme[theme];\n\n  return (\n    <IconButtonStyled\n      type={type}\n      color={color}\n      size={size}\n      addedStyles={addedStyles}\n      onClick={handleClick}\n      icon={icon}\n      theme={theme}\n    />\n  );\n};\n\n// FRONTEND: This is not working.\nIconButton.propTypes = {\n  theme:          PropTypes.string.isRequired,\n  type:           PropTypes.string.isRequired,\n  color:          PropTypes.string.isRequired,\n  size:           PropTypes.string.isRequired,\n  icon:           PropTypes.string.isRequired,\n  addedStyles:    PropTypes.object,\n  handleClick:    PropTypes.func\n};\n\nexport default IconButton;","import Form from './Form';\nimport { connect } from 'react-redux';\nimport {\n  addEntry,\n  initEntries,\n  updateForm\n} from '../../redux/actions';\n\nconst mapToStateToProps = ({\n  errorFields,\n  theme,\n  form,\n  form: {\n    firstName,\n    lastName,\n    email\n  },\n  showingRequirements\n}) => ({\n  errorFields,\n  theme,\n  form,\n  firstName,\n  lastName,\n  email,\n  showingRequirements\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateForm: (payload) => dispatch(updateForm(payload)),\n  addEntry: (entry) => dispatch(addEntry(entry)),\n  initEntries: (entries) => dispatch(initEntries(entries))\n});\n\nexport default connect(\n  mapToStateToProps,\n  mapDispatchToProps\n) (Form);","import React from 'react';\nimport BubbleCard from '../BubbleCard';\nimport styled from '@emotion/styled/macro';\nimport BasicButton from '../buttons/BasicButton';\nimport IconButton from '../buttons/IconButton';\nimport ColorTheme from '../../themes/colors';\n\n/** Colors of the current theme. */\nlet colorTheme;\n\n/** Styled Styled Styled Styled Styled Styled Styled Styled */\n/** Shared color styles. */\nlet copyColor;\n\nconst fontSize = {\n  fontSize: '14px',\n  display: 'inline-block',\n  verticalAlign: 'top'\n}\n\nconst Field = styled.div(() => ({\n  'label': {\n    fontWeight: '600',\n    width: '85px',\n    margin: '0',\n    ...fontSize,\n    ...copyColor\n  },\n  'span': {\n    display: 'inline-block',\n    whiteSpace: 'nowrap',\n    textOverflow: 'ellipsis',\n    width: 'calc(100% - 110px)',\n    overflow: 'hidden',\n    ...fontSize,\n    ...copyColor\n  }\n}));\n\n/** This is used in the entry removal button's Props. */\nconst removeAllButton = {\n  marginBottom: '20px'\n};\n\n/** This is used in the removal all entries button Props. */\nconst removeEntries = {\n  position: 'absolute',\n  top: '0',\n  right: '0'\n};\n\nconst EmptyEntries = styled.p(() => ({\n    color: colorTheme.secondaryCopy\n}));\n\nconst Fields = styled.div({\n  position: 'relative'\n});\n/** End End End End End End End End End */\n\n/** Triggered when the Remove All button is clicked. */\nconst onRemoveAll = (removeAllEntries) => {\n  /** Removes all Entries. */\n  removeAllEntries();\n};\n\n/** Triggered when the remove entry button is clicked. */\nconst onRemoveEntry = (removeEntry, id) => {\n  /** Removes a single entry. */\n  removeEntry(id);\n};\n\n\nconst Display = ({ theme, entries, removeAllEntries, removeEntry }) => {\n  colorTheme = ColorTheme[theme];\n  copyColor = { color: colorTheme.primaryCopy };\n  \n  return (\n    <BubbleCard className='col-6-md' label='Display Section' theme={theme}>\n      {(entries && entries.length !== 0)\n      ? (\n        <BasicButton\n          type='button'\n          color='orange'\n          size='sm'\n          addedStyles={removeAllButton}\n          handleClick={() => {onRemoveAll(removeAllEntries)}}\n          theme={theme}\n          >Remove All!\n        </BasicButton>\n      ) : (\n        <EmptyEntries theme={theme}>There are no current entries.<br />Fill out and submit the form.</EmptyEntries>\n      )}\n      {entries.map(({ id, firstName, lastName, email, password }, i) => (\n        <div key={id}>\n          {(i > 0) && <hr />}\n          <Fields>\n            <IconButton\n              type='button'\n              color='red'\n              size='sm'\n              icon='minus'\n              addedStyles={removeEntries}\n              handleClick={() => {onRemoveEntry(removeEntry, i)}}\n              theme={theme}\n              />\n            <Field>\n              <label>UUID:</label>\n              <span>{id}</span>\n            </Field>\n            <Field>\n              <label>First Name:</label>\n              <span>{firstName}</span>\n            </Field>\n            <Field>\n              <label>Last Name:</label>\n              <span>{lastName}</span>\n            </Field>\n            <Field>\n              <label>Email:</label>\n              <span>{email}</span>\n            </Field>\n            <Field>\n              <label>Password:</label>\n              <span>{password}</span>\n            </Field>\n          </Fields>\n        </div>\n      ))}\n    </BubbleCard>\n  );\n};\n\nexport default Display;","import React from 'react';\nimport Form from '../Form';\nimport Display from '../Display';\nimport styled from '@emotion/styled/macro';\nimport ColorTheme from '../../themes/colors';\n\n/** Colors of the current theme. */\nlet colorTheme;\n\n/** Styled Styled Styled Styled Styled Styled Styled Styled */\nconst GlobalWrapper = styled.div(() => ({\n  height: '100%',\n  minHeight: '100vh',\n  backgroundColor: colorTheme.primaryBackground\n}));\n\nconst WarningText = styled.div(() => ({\n  textAlign: 'center',\n  marginTop: '30px',\n  display: 'inline-block',\n  width: '100%',\n\n  'p': {\n    display: 'inline-block',\n    margin: '0',\n    color: colorTheme.warning,\n    '& + p' : { textDecoration: 'underline' }\n  }\n}));\n\nconst CurrentTheme = styled.div(() => ({\n  textAlign: 'center',\n\n  '& > *': {\n    color: `${colorTheme.progression}`,\n\n    '&:hover': {\n      color: `${colorTheme.progressionHover}`,\n    }\n  },\n\n  '& > p': {\n    display: 'block',\n    margin: '30px 0 0'\n  },\n\n  'span, span p': {\n    display: 'inline-block',\n  },\n\n  'span p': {\n    margin: '0',\n    textDecoration: 'underline',\n    cursor: 'pointer'\n  }\n}));\n/** End End End End End End End End */\n\n/** Triggered when the theme toggle link is clicked */\nconst onClickChangeTheme = (toggleTheme) => {\n  /** Toggles the theme. */\n  toggleTheme();\n};\n\nconst App = ({ theme, toggleTheme }) => {\n  colorTheme = ColorTheme[theme];\n\n  /** This splits up camel case strings. */\n  let formatedTheme = theme.replace(/([a-z])([A-Z])/g, '$1 $2');\n  /** This uppercase's the first letter of a string. */\n  formatedTheme = formatedTheme.charAt(0).toUpperCase() + formatedTheme.slice(1);\n\n  return (\n    <GlobalWrapper>\n      <div className=\"container\">\n        <WarningText>\n          <p>Warning, your password will be displayed in the Display Section.&nbsp;</p>\n          <p>Do not use any personal Passwords.</p>\n        </WarningText>\n        <CurrentTheme>\n          <p>You are currently in the <strong>{formatedTheme}</strong> theme.</p>\n          <span>Click&nbsp;\n            <p onClick={() => (onClickChangeTheme(toggleTheme))}>here</p>\n          </span>\n          <span>&nbsp;to switch theme.</span>\n        </CurrentTheme>\n        <Form />\n        <Display />\n      </div>\n    </GlobalWrapper>\n  );\n};\n\nexport default App;\n","import Display from './Display';\nimport { connect } from 'react-redux';\nimport { removeEntry, removeAllEntries } from '../../redux/actions';\n\nconst mapToStateToProps = ({ entries, theme }) => ({\n  entries,\n  theme\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    removeEntry: (id) => dispatch(removeEntry(id)),\n    removeAllEntries: () => dispatch(removeAllEntries()),\n  };\n};\n\nexport default connect(\n  mapToStateToProps,\n  mapDispatchToProps\n) (Display);","import App from './App';\nimport { connect } from 'react-redux';\nimport { toggleTheme } from '../../redux/actions';\n\nconst mapToStateToProps = ({ theme }) => ({ theme });\nconst mapDispatchToProps = (dispatch) => ({\n  toggleTheme: () => dispatch(toggleTheme())\n});\n\nexport default connect(\n  mapToStateToProps,\n  mapDispatchToProps\n) (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  ADD_ENTRY,\n  INIT_ENTRIES,\n  REMOVE_ENTRY,\n  REMOVE_ALL_ENTRIES,\n  TOGGLE_THEME,\n  UPDATE_FORM,\n  TOGGLE_REQUIREMENTS\n} from './constants';\n\nconst initialState = {\n  entries: [],\n  theme: 'cloud',\n  errorFields: {},\n  password: '',\n  showingRequirements: false,\n  form: {\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: ''\n  }\n};\n\n// Look into moving some of this logic into the middleware.\nfunction rootReducer(state = initialState, action) {\n  const { type, payload, status } = action;\n\n  /** ADD_ENTRY - ADD_ENTRY - ADD_ENTRY - ADD_ENTRY - ADD_ENTRY */\n  if(type === ADD_ENTRY) {\n    let changes;\n    \n    if(status === 'success') {\n      /** Adding the new list to the old one. */\n      const entries = state.entries.concat(payload.entries);\n      /** Setting the entries to LocalStorage */\n      localStorage.setItem('entries', JSON.stringify({ entries }));\n\n      const form = {\n        firstName: '',\n        lastName: '',\n        email: '',\n        password: '',\n      };\n\n      changes = {\n        entries,\n        errorFields: { ...state.errorFields, ...payload.errorFields },\n        password: '',\n        form\n      };\n\n    } else {\n      changes = {\n        errorFields: { ...payload.errorFields }\n      };\n    };\n\n    return Object.assign({}, state, { ...changes });\n\n  /** INIT_ENTRIES - INIT_ENTRIES - INIT_ENTRIES - INIT_ENTRIES */\n  } else if(type === INIT_ENTRIES) {\n    return Object.assign({}, state, {\n      entries: state.entries.concat(payload)\n    });\n\n  /** REMOVE_ENTRY - REMOVE_ENTRY - REMOVE_ENTRY - REMOVE_ENTRY */\n  } else if(type === REMOVE_ENTRY) {\n    /** Copying and pasting Entries into its own constant. */\n    const entries = [...state.entries];\n\n    /** The payload here is the index of the array item. */\n    entries.splice(payload, 1);\n    localStorage.setItem('entries', JSON.stringify({ entries }));\n\n    return Object.assign({}, state, { entries });\n\n  /** REMOVE_ALL_ENTRIES - REMOVE_ALL_ENTRIES - REMOVE_ALL_ENTRIES */\n  } else if(type === REMOVE_ALL_ENTRIES) {\n    const entries = [];\n    /** Setting the entries to LocalStorage */\n    localStorage.setItem('entries', JSON.stringify(entries));\n\n    return Object.assign({}, state, { entries });\n\n  /** TOGGLE_THEME - TOGGLE_THEME - TOGGLE_THEME - TOGGLE_THEME */\n  } else if(type === TOGGLE_THEME) {\n    /** Toggling in between two themes. */\n    const theme = (state.theme === 'cloud')\n      ? 'nightVision' : 'cloud';\n\n    return Object.assign({}, state, { theme });\n\n  /** UPDATE_FORM - UPDATE_FORM - UPDATE_FORM - UPDATE_FORM */\n} else if(type === UPDATE_FORM) {\n  const { name, value } = payload;\n\n  let newState = Object.assign({}, state);\n  newState.form[name] = value;\n\n  return newState;\n\n/** TOGGLE_REQUIREMENTS - TOGGLE_REQUIREMENTS - TOGGLE_REQUIREMENTS */\n} else if(type === TOGGLE_REQUIREMENTS) {\n  /** Toggling in between two options. */\n  const showingRequirements = (state.showingRequirements) ? false : true;\n\n  return Object.assign({}, state, { showingRequirements })\n};\n\nreturn state;\n};\n\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport { formValidation } from './middleware';\n\nconst storeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  storeEnhancers(applyMiddleware(formValidation, thunk))\n);\n\nexport default store;","import { ADD_ENTRY } from './constants';\nimport {\n  nameLengthTest,\n  emailTest,\n  passwordLengthTest,\n  passwordUpperTest,\n  passwordLowerTest,\n  passwordSpecialTest,\n  passwordNumberTest\n} from '../helpers/conditions';\n\nexport function formValidation({ dispatch }) {\n  return function(next) {\n    return function(action) {\n      if(action.type === ADD_ENTRY) {\n        /** Deconstructing */\n        const {\n          type,\n          payload: {\n            firstName,\n            lastName,\n            email,\n            password\n          }\n        } = action;\n\n        /** Object that contains all of the fields statuses including the forms status. */\n        let errorRequirements = {};\n        \n        /** Form validation on submit => First Name */\n        errorRequirements.firstName = nameLengthTest(firstName);\n        /** Form validation on submit => Last Name */\n        errorRequirements.lastName = nameLengthTest(lastName);\n        /** Form validation on submit => Email */\n        errorRequirements.email = emailTest(email)\n          ? false : true;\n        /** Form validation on submit => Password */\n        errorRequirements.password = (\n          passwordLengthTest(password)\n          && passwordUpperTest(password)\n          && passwordLowerTest(password)\n          && passwordSpecialTest(password)\n          && passwordNumberTest(password)\n        ) ? false : true\n        /** Sets the default value before iteration. */\n        errorRequirements.failedForm = false;\n        Object.keys(errorRequirements).map((key) => {\n          if(errorRequirements[key]) { errorRequirements.failedForm = true };\n        });\n\n        /** Pre-building the payload. */\n        const payload = {\n          entries: action.payload,\n          errorFields: errorRequirements\n        };\n\n        /** If the form failed in any of the fields. */\n        const status = (errorRequirements.failedForm) ? 'error': 'success';\n\n        action = { type, payload, status };\n      };\n      return next(action);\n    };\n  };\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/normalizer.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/stores';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}