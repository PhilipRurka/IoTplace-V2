{"version":3,"sources":["components/BubbleCard.jsx","components/Form.jsx","components/Display.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["Wrapper","Content","H1","BubbleCard","props","className","label","children","Form","FormWrapper","Label","Input","Field","display","verticalAlign","marginTop","TopChild","flexBasis","Half","Submit","handleSubmit","event","preventDefault","alert","this","onSubmit","type","React","Component","Display","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2RAGMA,EAAU,yIAOVC,EAAU,qNAUVC,EAAK,4EAeIC,EAXI,SAACC,GAClB,OACE,kBAACJ,EAAD,CAASK,UAAU,YACjB,kBAACJ,EAAD,KACE,kBAACC,EAAD,KAAKE,EAAME,OACVF,EAAMG,YCoDAC,E,2MA3EbC,YAAc,4I,EAOdC,MAAQ,kI,EAORC,MAAQ,gK,EAQRC,MAAQ,yCAAW,kBAAyB,CACxCC,QAAS,eACTC,cAAe,MACfC,UAHe,EAAGC,SAGM,IAAM,OAC9BC,UAJe,EAAaC,KAIR,mBAAqB,UAJrC,I,EAORC,OAAS,8N,EAYTC,aAAe,SAACC,GACdA,EAAMC,iBACNC,MAAM,4B,wEAGE,IACAd,EAA6Ce,KAA7Cf,YAAaC,EAAgCc,KAAhCd,MAAOC,EAAyBa,KAAzBb,MAAOC,EAAkBY,KAAlBZ,MAAOO,EAAWK,KAAXL,OAE1C,OACE,kBAAC,EAAD,CAAYb,MAAM,gBAChB,kBAACG,EAAD,CAAagB,SAAUD,KAAKJ,cAC1B,kBAACR,EAAD,CAAOI,UAAQ,EAACE,MAAI,GAClB,kBAACR,EAAD,mBACA,kBAACC,EAAD,CAAOe,KAAK,UAEd,kBAACd,EAAD,CAAOI,UAAQ,EAACE,MAAI,GAClB,kBAACR,EAAD,kBACA,kBAACC,EAAD,CAAOe,KAAK,UAEd,kBAACd,EAAD,KACE,kBAACF,EAAD,qBACA,kBAACC,EAAD,CAAOe,KAAK,WAEd,kBAACd,EAAD,KACE,kBAACF,EAAD,2CACA,kBAACC,EAAD,CAAOe,KAAK,cAEd,kBAACP,EAAD,CAAQO,KAAK,UAAb,gB,GAtESC,IAAMC,WCOVC,EARC,WACd,OACE,kBAAC,EAAD,CAAYxB,UAAU,WAAWC,MAAM,qBCQ5BwB,MATf,WACE,OACE,yBAAKzB,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1d65a992.chunk.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled/macro';\n\nconst Wrapper = styled.div({\n  display: 'inline-block',\n  verticalAlign: 'top',\n  marginTop: '15px',\n  padding: '15px'\n});\n\nconst Content = styled.div({\n  display: 'inline-block',\n  width: '100%',\n  border: '2px solid #A9E5BB',\n  borderRadius: '10px',\n  padding: '15px 20px',\n  backgroundColor: 'white',\n  boxShadow: '0 0 13px #9ffffc'\n});\n\nconst H1 = styled.h1({\n  margin: '0'\n});\n\nconst BubbleCard = (props) => {\n  return (\n    <Wrapper className='col-md-6'>\n      <Content>\n        <H1>{props.label}</H1>\n        {props.children}\n      </Content>\n    </Wrapper>\n  );\n};\n\nexport default BubbleCard;\n","import React from 'react';\nimport BubbleCard from './BubbleCard';\nimport styled from '@emotion/styled/macro';\n\nclass Form extends React.Component {\n  /** Styled Styled Styled Styled Styled Styled Styled Styled */\n  FormWrapper = styled.form({\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n    margin: '15px 0'\n  });\n  \n  Label = styled.label({\n    display: 'block',\n    margin: '0',\n    fontWeight: '600',\n    letterSpacing: '0.5px'\n  });\n  \n  Input = styled.input({\n    backgroundColor: '#e1fffe',\n    border: '1px solid #A9E5BB',\n    borderRadius: '5px',\n    padding: '5px',\n    width: '100%'\n  });\n  \n  Field = styled.div(({ TopChild, Half }) => ({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      marginTop: (TopChild) ? '0' : '20px',\n      flexBasis: (Half) ? 'calc(50% - 10px)' : '100%'\n    }));\n\n  Submit = styled.button({\n    marginTop: '30px',\n    border: '1px solid #1cc950',\n    backgroundColor: '#1cc950',\n    borderRadius: '10px',\n    padding: '10px 20px',\n    color: 'white',\n    letterSpacing: '0.5px',\n    fontWeight: '600'\n  });\n  /** End End End End End End End End End */\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    alert('Form Has Been Submited!');\n  }\n\n  render() {\n    const { FormWrapper, Label, Input, Field, Submit } = this;\n\n    return (\n      <BubbleCard label='Form Section'>\n        <FormWrapper onSubmit={this.handleSubmit}>\n          <Field TopChild Half>\n            <Label>First Name</Label>\n            <Input type='text' />\n          </Field>\n          <Field TopChild Half>\n            <Label>Last Name</Label>\n            <Input type='text' />\n          </Field>\n          <Field>\n            <Label>Email Adress</Label>\n            <Input type='email' />\n          </Field>\n          <Field>\n            <Label>Password (This will be displayed!)</Label>\n            <Input type='password' />\n          </Field>\n          <Submit type='submit'>Submit</Submit>\n        </FormWrapper>\n      </BubbleCard>\n    );\n  };\n};\n\nexport default Form;","import React from 'react';\nimport BubbleCard from './BubbleCard';\n\nconst Display = () => {\n  return (\n    <BubbleCard className='col-6-md' label='Display Section'>\n\n    </BubbleCard>\n  );\n};\n\nexport default Display;","import React from 'react';\nimport Form from './Form';\nimport Display from './Display';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Form />\n      <Display />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/normalizer.scss';\nimport './styles/main.scss';\nimport App from './components/App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}